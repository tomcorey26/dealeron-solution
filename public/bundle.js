(()=>{"use strict";class r{constructor(r,e){this.grid=((r,e)=>{let t=[];for(let n=0;n<=e;n++){let e=[];for(let t=0;t<=r;t++)e.push(0);t.push(e)}return t})(r,e)}printGrid(){this.grid.forEach((r=>{console.log(r)}))}}const e={N:!0,E:!0,S:!0,W:!0},t={M:!0,L:!0,R:!0},n=document.querySelector("form");n.addEventListener("submit",(r=>{r.preventDefault();const l=(r=>{const n=r.querySelector("textarea").value.trim().split("\n");if(n.length<4)return alert(`only ${n.length} inputs given, 4 or more required`),null;if((n.length-1)%2!=0)return alert("Missing Rover instructions or position"),null;let o=[];return n.forEach(((r,n)=>{const l=r.split(" ").join("");if(!((r,n)=>{const o=n%2!=0&&0!==n;let l;return l=0===n?(r=>{r.length>2&&alert(`Error: ${r.length} inputs provided for corner, only 2 required`),r.length<2&&alert(`Error: ${r.length} inputs provided for corner,2 required`);for(let e=0;e<r.length;e++){let t=r[e];if(isNaN(t))return alert(`Incorrect corner position input ${t}, please pass numbers only`),!1}return!0})(r):o?(r=>{r.length>3&&alert(`Error: ${r.length} inputs provided for rover position, only 3 required`);const t=r[0],n=r[1],o=r[2];return isNaN(t)||isNaN(n)?(alert(`Incorrect rover position input (${t},${n}), please pass numbers only`),!1):o in e||(alert(`Incorrect rover direction input (${o}), please pass NESW only `),!1)})(r):(r=>{for(let e=0;e<r.length;e++){let n=r[e];if(!(n in t))return alert(`Incorrect corner rover movement input ${n}, please pass MRL only`),!1}return!0})(r),l})(l,n))return null;o.push(l)})),o})(n);l&&o(l),console.log(l)}));const o=e=>{const t=e[0],n=Number(t[0]),o=Number(t[1]);new r(n,o);let l=[];for(let r=1;r<e.length;r+=2){const t=e[r],n=Number(t[0]),o=Number(t[1]),s=t[2],i=e[r+1];l.push({startPosition:{x:n,y:o},instructions:i,dir:s,x:n,y:o})}console.log(l)}})();