(()=>{"use strict";class r{static displayError(r){alert(r)}static renderGrid(r){let e=document.getElementById("grid"),t="";r.forEach((r=>{t+='<div class="row">',r.forEach((r=>{if(r){let e;"S"===r.dir?e="v":"N"===r.dir?e="^":"E"===r.dir?e=">":"W"===r.dir&&(e="<"),t+=`<div class="square"><div class="rover">${e}</div> </div>`}else t+='<div class="square"> </div>'})),t+="</div>"})),e.innerHTML=t}}var e=function(r,e,t,i){return new(t||(t=Promise))((function(n,s){function o(r){try{c(i.next(r))}catch(r){s(r)}}function l(r){try{c(i.throw(r))}catch(r){s(r)}}function c(r){var e;r.done?n(r.value):(e=r.value,e instanceof t?e:new t((function(r){r(e)}))).then(o,l)}c((i=i.apply(r,e||[])).next())}))};class t{constructor(r,t){this.printGrid=()=>{this.grid.forEach((r=>{console.log(r)}))},this.exploreGrid=r=>e(this,void 0,void 0,(function*(){console.log(r),yield this.renderRoverOnGrid(r);for(let e=0;e<r.instructions.length;e++){const t=r.instructions[e];console.log("hi"),"L"===t||"R"===t?r.changeDirection(t):r.moveRover(),yield this.renderRoverOnGrid(r)}})),this.grid=((r,e)=>{let t=[];for(let i=0;i<=e;i++){let e=[];for(let t=0;t<=r;t++)e.push(null);t.push(e)}return t})(r,t)}renderRoverOnGrid(t){return e(this,void 0,void 0,(function*(){yield new Promise((r=>setTimeout(r,500)));const e=this.grid.length-1;this.grid[e-t.y][t.x]=t,r.renderGrid(this.grid)}))}}const i={N:!0,E:!0,S:!0,W:!0},n={M:!0,L:!0,R:!0};class s{constructor(r){this.startPosition=r.startPosition,this.instructions=r.instructions,this.dir=r.dir,this.x=r.x,this.y=r.y}changeDirection(r){if(console.log(this),"L"===r)switch(this.dir){case"E":this.dir="N";break;case"N":this.dir="W";break;case"S":this.dir="E";break;case"W":this.dir="S"}else switch(this.dir){case"E":this.dir="S";break;case"N":this.dir="E";break;case"S":this.dir="W";break;case"W":this.dir="N"}}moveRover(){}}const o=document.querySelector("form");o.addEventListener("submit",(r=>{r.preventDefault();const e=(r=>{const e=r.querySelector("textarea").value.trim().split("\n");if(e.length<4)return alert(`only ${e.length} inputs given, 4 or more required`),null;if((e.length-1)%2!=0)return alert("Missing Rover instructions or position"),null;let t=[];return e.forEach(((r,e)=>{const s=r.split(" ");if(!((r,e)=>{const t=e%2!=0&&0!==e;let s;return s=0===e?(r=>{r.length>2&&alert(`Error: ${r.length} inputs provided for corner, only 2 required (check for extra spaces)`),r.length<2&&alert(`Error: ${r.length} inputs provided for corner,2 required (check for extra spaces)`);for(let e=0;e<r.length;e++){let t=r[e];if(isNaN(t))return alert(`Incorrect corner position input ${t}, please pass numbers only`),!1}return!0})(r):t?(r=>{r.length>3&&alert(`Error: ${r.length} inputs provided for rover position, only 3 required`);const e=r[0],t=r[1],n=r[2];return isNaN(e)||isNaN(t)?(alert(`Incorrect rover position input (${e},${t}), please pass numbers only (check for extra spaces)`),!1):n in i||(alert(`Incorrect rover direction input (${n}), please pass NESW only `),!1)})(r):(r=>{let e=r[0];for(let r=0;r<e.length;r++){let t=e[r];if(!(t in n))return alert(`Incorrect corner rover movement input ${t}, please pass MRL only`),!1}return!0})(r),s})(s,e))return null;t.push(s)})),t})(o);e&&l(e)}));const l=e=>{console.log("the data",e);const i=e[0],n=Number(i[0]),o=Number(i[1]);let{grid:l,exploreGrid:c}=new t(n,o);r.renderGrid(l),console.log("grid",l);const a=(r=>{let e=[];for(let t=1;t<r.length;t+=2){const i=r[t],n=Number(i[0]),o=Number(i[1]),l=i[2],c=r[t+1][0],a=new s({startPosition:{x:n,y:o},instructions:c,dir:l,x:n,y:o});e.push(a)}return e})(e);console.log("the rovers",a),c(a[0])}})();